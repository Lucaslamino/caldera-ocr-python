import easyocr  
import pandas as pd  
import matplotlib.pyplot as plt  
import seaborn as sns  
import numpy as np  
import os  
from docx import Document  
from docx.shared import Inches  

# FUNCI√ìN 1: EXTRACCI√ìN DE DATOS DESDE IMAGEN
# Esta funci√≥n se encarga de leer una imagen, extraer el texto y convertirlo
# en un DataFrame de pandas limpio y listo para el an√°lisis.

def extraer_datos_desde_imagen(ruta_imagen):
    """
    Extrae datos tabulares de una imagen, filtrando valores num√©ricos y descartando texto.

    Args:
        ruta_imagen (str): La ruta del archivo de imagen que contiene la tabla.

    Returns:
        pd.DataFrame: Un DataFrame de Pandas con los datos extra√≠dos y tipados num√©ricamente,
                      o None si ocurre un error.
    """
    try:
        # Se inicializa el lector de OCR con soporte para ingl√©s y espa√±ol.
        reader = easyocr.Reader(['en', 'es']) 
        print(f"üîç Leyendo imagen '{ruta_imagen}'...")
        # Se lee el texto de la imagen. detail=0 devuelve solo el texto, sin coordenadas.
        resultado_ocr = reader.readtext(ruta_imagen, detail=0)

        # Se crea una lista vac√≠a para almacenar solo los valores que sean num√©ricos.
        datos_numericos = []
        # Se itera sobre cada fragmento de texto extra√≠do por el OCR.
        for texto in resultado_ocr:
            # Se limpia el texto: se quitan espacios y se reemplaza la coma decimal por un punto.
            texto_limpio = texto.strip().replace(',', '.')
            try:
                # Se intenta convertir el texto a un n√∫mero flotante (float).
                float(texto_limpio)
                # Si la conversi√≥n es exitosa, se a√±ade a la lista de datos num√©ricos.
                datos_numericos.append(texto_limpio)
            except ValueError:
                # Si el texto no se puede convertir a n√∫mero (ej: "Presi√≥n"), se ignora.
                pass 

        # Se comprueba si el n√∫mero total de datos es divisible por 8 (el n√∫mero de columnas).
        if len(datos_numericos) % 8 != 0:
            # Si no es m√∫ltiplo, podr√≠a haber un error en la extracci√≥n. Se muestra una advertencia.
            print(f"‚ö†Ô∏è Alerta: El n√∫mero de datos num√©ricos ({len(datos_numericos)}) no es m√∫ltiplo de 8. "
                  "Las filas podr√≠an estar incompletas o mal extra√≠das.")

        # Se agrupan los datos en filas de 8 elementos cada una.
        filas = [datos_numericos[i:i+8] for i in range(0, len(datos_numericos), 8)]

        # Se definen los nombres de las columnas para el DataFrame.
        columnas = [
            "Presi√≥n (bar)", "Temperatura (¬∞C)", "Caudal (m¬≥/h)",
            "Nivel de Agua (%)", "Consumo de Combustible (L/h)",
            "CO (%)", "NOx (%)", "Horas Operadas"
        ]

        # Se crea el DataFrame de pandas a partir de las filas y columnas.
        df = pd.DataFrame(filas, columns=columnas)

        # Se itera sobre cada columna del DataFrame.
        for col in df.columns:
            # Se convierte cada columna a tipo num√©rico. 'coerce' convierte errores en NaNs (Not a Number).
            df[col] = pd.to_numeric(df[col], errors='coerce')
        
        # Se retorna el DataFrame final y limpio.
        return df

    # Manejo de errores espec√≠ficos.
    except FileNotFoundError:
        # Si la imagen no se encuentra en la ruta especificada.
        print(f"‚ùå Archivo de imagen no encontrado: '{ruta_imagen}'.")
        return None
    except Exception as e:
        # Para cualquier otro error inesperado durante el proceso.
        print(f"‚ùå Ocurri√≥ un error inesperado durante la extracci√≥n de datos: {e}")
        return None


# FUNCI√ìN 2: GR√ÅFICO DE AN√ÅLISIS TEMPORAL
# Crea gr√°ficos de l√≠neas para visualizar c√≥mo cambian las emisiones y el
# consumo de combustible a lo largo del tiempo (horas operadas).

def graficar_analisis_temporal(df, ruta_salida):
    """
    Genera y guarda un gr√°fico de l√≠neas mostrando la evoluci√≥n de emisiones (CO, NOx)
    y consumo de combustible a lo largo de las horas operadas.

    Args:
        df (pd.DataFrame): DataFrame con los datos a graficar.
        ruta_salida (str): Ruta completa para guardar la imagen del gr√°fico.
    """
    # Se limpian los nombres de las columnas por si tuvieran espacios extra.
    df.columns = df.columns.str.strip()

    # Se definen los nombres de las columnas a usar para mayor claridad en el c√≥digo.
    eje_x = "Horas Operadas"
    emisiones_co = "CO (%)"
    emisiones_nox = "NOx (%)"
    consumo_combustible = "Consumo de Combustible (L/h)"

    # Se crea una figura para el gr√°fico con un tama√±o espec√≠fico.
    plt.figure(figsize=(14, 6))

    # Se crea el primer subgr√°fico (1 fila, 2 columnas, posici√≥n 1).
    ax1 = plt.subplot(1, 2, 1)
    # Se dibuja la l√≠nea para las emisiones de CO en el eje Y primario (ax1).
    sns.lineplot(x=df[eje_x], y=df[emisiones_co], marker='o', label='CO (%)', ax=ax1, color='red')
    # Se crea un segundo eje Y que comparte el mismo eje X.
    ax2 = ax1.twinx()
    # Se dibuja la l√≠nea para las emisiones de NOx en el eje Y secundario (ax2).
    sns.lineplot(x=df[eje_x], y=df[emisiones_nox], marker='o', label='NOx (%)', ax=ax2, color='blue')
    
    # Se configuran t√≠tulos y etiquetas para el primer subgr√°fico.
    ax1.set_title("Evoluci√≥n de Emisiones")
    ax1.set_xlabel("Horas Operadas")
    ax1.set_ylabel("CO (%)", color='red')
    ax2.set_ylabel("NOx (%)", color='blue')
    ax1.grid(True) # Se a√±ade una grilla.
    ax1.legend(loc='upper left') # Se muestra la leyenda del eje 1.
    ax2.legend(loc='upper right') # Se muestra la leyenda del eje 2.

    # Se crea el segundo subgr√°fico (1 fila, 2 columnas, posici√≥n 2).
    plt.subplot(1, 2, 2)
    # Se dibuja la l√≠nea para el consumo de combustible.
    sns.lineplot(x=df[eje_x], y=df[consumo_combustible], marker='o', color='green')
    
    # Se configuran t√≠tulos y etiquetas para el segundo subgr√°fico.
    plt.title("Evoluci√≥n del Consumo de Combustible")
    plt.xlabel("Horas Operadas")
    plt.ylabel("Consumo de Combustible (L/h)")
    plt.grid(True) # Se a√±ade una grilla.

    # Se ajusta el dise√±o para que los gr√°ficos no se superpongan.
    plt.tight_layout()
    # Se guarda la figura completa en la ruta especificada.
    plt.savefig(ruta_salida)
    # Se cierra la figura para liberar memoria.
    plt.close()


# FUNCI√ìN 3: GR√ÅFICO DE EFICIENCIA DE COMBUSTI√ìN
# Genera diagramas de caja (box plots) para analizar el consumo y las
# emisiones en diferentes rangos de caudal.

def graficar_eficiencia_combustion_boxplot(df, ruta_salida):
    """
    Genera y guarda box plots para analizar el consumo de combustible y las emisiones de CO
    en funci√≥n del rango de caudal.

    Args:
        df (pd.DataFrame): DataFrame con los datos a graficar.
        ruta_salida (str): Ruta completa para guardar la imagen del gr√°fico.
    """
    # Se obtienen los valores m√≠nimo y m√°ximo del caudal.
    min_caudal = df["Caudal (m¬≥/h)"].min()
    max_caudal = df["Caudal (m¬≥/h)"].max()

    # Se verifica si hay suficientes datos para crear los rangos.
    if pd.isna(min_caudal) or pd.isna(max_caudal) or min_caudal == max_caudal:
        print("‚ö†Ô∏è No hay suficiente variaci√≥n en 'Caudal (m¬≥/h)' para crear rangos. Saltando este gr√°fico.")
        return # Si no hay variaci√≥n, se termina la funci√≥n.

    # Se crean 5 rangos (bins) de igual tama√±o entre el caudal m√≠nimo y m√°ximo.
    bins = np.linspace(min_caudal, max_caudal, 6)
    # Se crean etiquetas para cada rango (ej: "10.0 - 12.5").
    labels = [f"{round(bins[i],2)} - {round(bins[i+1],2)}" for i in range(len(bins)-1)]
    # Se hace una copia del DataFrame para no modificar el original.
    df_temp = df.copy() 
    # Se crea una nueva columna 'Caudal_Rango' que clasifica cada valor de caudal en un rango.
    df_temp['Caudal_Rango'] = pd.cut(df_temp["Caudal (m¬≥/h)"], bins=bins, labels=labels, include_lowest=True)

    # Se crea la figura para los gr√°ficos.
    plt.figure(figsize=(14,6))

    # Se crea el primer subgr√°fico (1 fila, 2 columnas, posici√≥n 1).
    plt.subplot(1, 2, 1)
    # Se genera un box plot del consumo de combustible para cada rango de caudal.
    sns.boxplot(x='Caudal_Rango', y='Consumo de Combustible (L/h)', data=df_temp, palette='Greens')
    # Se a√±aden t√≠tulos y etiquetas.
    plt.title('Consumo de Combustible por Rango de Caudal')
    plt.xlabel('Rango de Caudal (m¬≥/h)')
    plt.ylabel('Consumo de Combustible (L/h)')
    plt.xticks(rotation=45) # Se rotan las etiquetas del eje X para que no se superpongan.

    # Se crea el segundo subgr√°fico (1 fila, 2 columnas, posici√≥n 2).
    plt.subplot(1, 2, 2)
    # Se genera un box plot de las emisiones de CO para cada rango de caudal.
    sns.boxplot(x='Caudal_Rango', y='CO (%)', data=df_temp, palette='Reds')
    # Se a√±aden t√≠tulos y etiquetas.
    plt.title('CO (%) por Rango de Caudal')
    plt.xlabel('Rango de Caudal (m¬≥/h)')
    plt.ylabel('CO (%)')
    plt.xticks(rotation=45) # Se rotan las etiquetas del eje X.

    # Se ajusta el dise√±o y se guarda la figura.
    plt.tight_layout()
    plt.savefig(ruta_salida)
    plt.close() # Se cierra la figura.


# FUNCI√ìN 4: GR√ÅFICO DE AN√ÅLISIS DE CORRELACI√ìN
# Crea un gr√°fico de dispersi√≥n y un mapa de calor para ver la relaci√≥n
# entre las diferentes variables.

def graficar_analisis_correlacion(df, ruta_salida):
    """
    Genera y guarda un scatter plot de Temperatura vs Presi√≥n y un mapa de calor de correlaciones.

    Args:
        df (pd.DataFrame): DataFrame con los datos a graficar.
        ruta_salida (str): Ruta completa para guardar la imagen del gr√°fico.
    """
    # Se definen los nombres de las columnas para mayor claridad.
    presion = "Presi√≥n (bar)"
    temperatura = "Temperatura (¬∞C)"

    # Se crea la figura.
    plt.figure(figsize=(14, 6))

    # Se crea el primer subgr√°fico: un gr√°fico de dispersi√≥n (scatter plot).
    ax1 = plt.subplot(1, 2, 1)
    # Se grafica la relaci√≥n entre presi√≥n (eje X) y temperatura (eje Y).
    sns.scatterplot(x=df[presion], y=df[temperatura], ax=ax1)
    # Se a√±aden t√≠tulos, etiquetas y una grilla.
    ax1.set_title("Temperatura vs Presi√≥n")
    ax1.set_xlabel("Presi√≥n (bar)")
    ax1.set_ylabel("Temperatura (¬∞C)")
    ax1.grid(True)

    # Se crea el segundo subgr√°fico: un mapa de calor (heatmap).
    ax2 = plt.subplot(1, 2, 2)
    # Se seleccionan solo las columnas num√©ricas del DataFrame.
    df_numeric = df.select_dtypes(include=np.number)
    # Se calcula la matriz de correlaci√≥n entre todas las variables.
    correlacion = df_numeric.corr()
    # Se dibuja el mapa de calor con los valores de correlaci√≥n.
    sns.heatmap(correlacion, annot=True, fmt=".2f", cmap="coolwarm", center=0, ax=ax2)
    ax2.set_title("Mapa de Calor de Correlaciones")

    # Se ajusta el dise√±o, se guarda y se cierra la figura.
    plt.tight_layout()
    plt.savefig(ruta_salida)
    plt.close()


# FUNCI√ìN 5: GR√ÅFICO DE DISTRIBUCI√ìN Y ANOMAL√çAS
# Crea histogramas para ver la distribuci√≥n de los datos y box plots
# para detectar posibles valores at√≠picos (anomal√≠as).

def graficar_distribucion_y_anomalias(df, ruta_salida):
    """
    Genera y guarda histogramas y box plots para visualizar la distribuci√≥n y anomal√≠as.

    Args:
        df (pd.DataFrame): DataFrame con los datos a graficar.
        ruta_salida (str): Ruta completa para guardar la imagen del gr√°fico.
    """
    # Se definen las variables para las que se crear√°n histogramas.
    variables_hist = ["Temperatura (¬∞C)", "Presi√≥n (bar)", "CO (%)", "Consumo de Combustible (L/h)"]
    # Se definen las variables para las que se crear√°n box plots (generalmente para detectar anomal√≠as).
    variables_box = ["CO (%)", "Consumo de Combustible (L/h)"]

    # Se crea una figura grande para alojar todos los subgr√°ficos.
    plt.figure(figsize=(16, 10))

    # Se crea un bucle para generar los histogramas.
    for i, var in enumerate(variables_hist, 1):
        # Se crea un subgr√°fico en una grilla de 2x4. El √≠ndice 'i' determina la posici√≥n.
        plt.subplot(2, 4, i)
        # Se dibuja el histograma. kde=True a√±ade una l√≠nea de densidad.
        sns.histplot(df[var], bins=30, kde=True, color='skyblue')
        # Se a√±aden t√≠tulos y etiquetas.
        plt.title(f"Histograma de {var}")
        plt.xlabel(var)
        plt.ylabel("Frecuencia")
        plt.grid(True, linestyle='--', alpha=0.5)

    # Se crea un bucle para generar los box plots. El √≠ndice empieza en 5 para continuar en la grilla.
    for i, var in enumerate(variables_box, 5):
        # Se crea un subgr√°fico en la grilla de 2x4.
        plt.subplot(2, 4, i)
        # Se dibuja el box plot.
        sns.boxplot(x=df[var], color='lightcoral')
        # Se a√±aden t√≠tulos y etiquetas.
        plt.title(f"Box Plot de {var}")
        plt.xlabel(var)
        plt.grid(True, linestyle='--', alpha=0.5)

    # Se ajusta el dise√±o, se guarda y se cierra.
    plt.tight_layout()
    plt.savefig(ruta_salida)
    plt.close()


# FUNCI√ìN 6: GENERACI√ìN DE INFORME EN WORD
# Consolida todos los gr√°ficos y an√°lisis en un √∫nico documento .docx.

def crear_informe_docx(df, directorio_graficos, nombre_informe="informe_caldera.docx"):
    """
    Crea un documento de Word (.docx) con t√≠tulos, explicaciones y los gr√°ficos generados.

    Args:
        df (pd.DataFrame): El DataFrame con los datos (no se usa directamente pero es buena pr√°ctica pasarlo).
        directorio_graficos (str): El directorio donde est√°n guardados los gr√°ficos.
        nombre_informe (str): Nombre del archivo .docx a generar.
    """
    # Se crea un objeto Documento de Word en memoria.
    document = Document()

    # Se a√±ade el t√≠tulo principal del informe. level=1 corresponde a "T√≠tulo 1".
    document.add_heading('Informe de An√°lisis de Datos de Operaci√≥n de Caldera', level=1)

    # Se a√±ade un p√°rrafo de introducci√≥n.
    document.add_paragraph(
        "Este informe presenta un an√°lisis de los datos de operaci√≥n de una caldera extra√≠dos "
        "de una imagen. A continuaci√≥n, se muestran visualizaciones clave para comprender "
        "el comportamiento del sistema..."
    )

    # --- Secci√≥n 1: An√°lisis Temporal ---
    # Se a√±ade un subt√≠tulo. level=2 corresponde a "T√≠tulo 2".
    document.add_heading('An√°lisis de la Evoluci√≥n Temporal', level=2)
    # Se a√±ade un p√°rrafo explicativo para esta secci√≥n.
    document.add_paragraph(
        "Esta secci√≥n presenta gr√°ficos de l√≠neas que muestran c√≥mo evolucionan las emisiones "
        "de CO y NOx, as√≠ como el consumo de combustible, a lo largo de las horas de operaci√≥n."
    )
    # Se construye la ruta completa a la imagen.
    ruta_grafico1 = os.path.join(directorio_graficos, 'analisis_temporal.png')
    # Se a√±ade la imagen al documento, especificando el ancho.
    document.add_picture(ruta_grafico1, width=Inches(6.5))
    document.add_paragraph('Gr√°fico 1: Tendencias temporales de emisiones y consumo de combustible.')
    document.add_paragraph('\n') # Se a√±ade un salto de l√≠nea para espaciar.

    # --- Secci√≥n 2: Eficiencia de Combusti√≥n ---
    document.add_heading('An√°lisis de la Eficiencia de Combusti√≥n por Caudal', level=2)
    document.add_paragraph(
        "En esta secci√≥n, se utilizan box plots para analizar la relaci√≥n entre el caudal "
        "de operaci√≥n, el consumo de combustible y las emisiones de CO."
    )
    ruta_grafico2 = os.path.join(directorio_graficos, 'analisis_eficiencia_boxplots.png')
    document.add_picture(ruta_grafico2, width=Inches(6.5))
    document.add_paragraph('Gr√°fico 2: Distribuci√≥n del consumo y emisiones por rangos de caudal.')
    document.add_paragraph('\n')

    # --- Secci√≥n 3: Correlaci√≥n ---
    document.add_heading('An√°lisis de Correlaci√≥n entre Par√°metros', level=2)
    document.add_paragraph(
        "Esta secci√≥n incluye un scatter plot para visualizar la relaci√≥n entre temperatura y "
        "presi√≥n, y un mapa de calor que muestra las correlaciones entre todas las variables."
    )
    ruta_grafico3 = os.path.join(directorio_graficos, 'analisis_correlacion.png')
    document.add_picture(ruta_grafico3, width=Inches(6.5))
    document.add_paragraph('Gr√°fico 3: Relaci√≥n temperatura-presi√≥n y mapa de calor de correlaciones.')
    document.add_paragraph('\n')

    # --- Secci√≥n 4: Distribuci√≥n y Anomal√≠as ---
    document.add_heading('An√°lisis de Distribuci√≥n y Posibles Anomal√≠as', level=2)
    document.add_paragraph(
        "Finalmente, se presentan histogramas para mostrar la distribuci√≥n de variables "
        "clave y box plots para identificar posibles valores at√≠picos o anomal√≠as."
    )
    ruta_grafico4 = os.path.join(directorio_graficos, 'distribucion_y_anomalias.png')
    document.add_picture(ruta_grafico4, width=Inches(6.5))
    document.add_paragraph('Gr√°fico 4: Distribuci√≥n de variables y detecci√≥n de anomal√≠as.')
    document.add_paragraph('\n')

    # Se intenta guardar el documento en el disco.
    try:
        document.save(nombre_informe)
        print(f"\n‚úÖ Informe '{nombre_informe}' generado con √©xito.")
    except Exception as e:
        # Si ocurre un error al guardar (ej: permisos de escritura).
        print(f"‚ùå Error al guardar el informe: {e}")


# FUNCI√ìN PRINCIPAL (main)
# Esta es la funci√≥n que coordina todo el proceso: llama a las funciones
# en el orden correcto para ejecutar el script de principio a fin.

def main():
    """
    Funci√≥n principal que coordina la extracci√≥n, an√°lisis y generaci√≥n de informes.
    """
    # Se definen los nombres de los archivos y directorios que se usar√°n.
    nombre_imagen = "caldera_table_50_observations.png"
    nombre_csv = "caldera_datos.csv"
    directorio_salida_graficos = "graficos_analisis"
    nombre_informe_final = "informe_analisis_caldera.docx"

    # Se comprueba si la carpeta para guardar los gr√°ficos ya existe.
    if not os.path.exists(directorio_salida_graficos):
        # Si no existe, se crea.
        os.makedirs(directorio_salida_graficos)
        print(f"üìÇ Creado el directorio: '{directorio_salida_graficos}' para guardar los gr√°ficos.")

    print("--- Iniciando extracci√≥n de datos y an√°lisis ---")

    # Se llama a la funci√≥n para extraer los datos de la imagen.
    df_caldera = extraer_datos_desde_imagen(nombre_imagen)

    # Se comprueba si la extracci√≥n fue exitosa y el DataFrame no est√° vac√≠o.
    if df_caldera is not None and not df_caldera.empty:
        # Si es exitosa, se guarda el DataFrame en un archivo CSV.
        df_caldera.to_csv(nombre_csv, index=False)
        print(f"\n‚úÖ Archivo CSV generado con √©xito: '{nombre_csv}'")
        # Se muestra una vista previa de las primeras 5 filas de los datos.
        print("\nVista previa de los datos:")
        print(df_caldera.head())

        print("\n--- Generando gr√°ficos de an√°lisis ---")
        # Se llama a cada funci√≥n de graficaci√≥n, pas√°ndole el DataFrame y la ruta de salida.
        graficar_analisis_temporal(df_caldera, os.path.join(directorio_salida_graficos, "analisis_temporal.png"))
        graficar_eficiencia_combustion_boxplot(df_caldera, os.path.join(directorio_salida_graficos, "analisis_eficiencia_boxplots.png"))
        graficar_analisis_correlacion(df_caldera, os.path.join(directorio_salida_graficos, "analisis_correlacion.png"))
        graficar_distribucion_y_anomalias(df_caldera, os.path.join(directorio_salida_graficos, "distribucion_y_anomalias.png"))
        print(f"\n‚úÖ Todos los gr√°ficos han sido generados y guardados en '{directorio_salida_graficos}'.")

        # Se llama a la funci√≥n para crear el informe final en Word.
        print("\n--- Generando informe en Word ---")
        crear_informe_docx(df_caldera, directorio_salida_graficos, nombre_informe_final)

    else:
        # Si la extracci√≥n de datos fall√≥, se muestra un mensaje de error.
        print("\n‚ùå No se pudo generar el DataFrame o est√° vac√≠o. Revisa los errores anteriores.")

# PUNTO DE ENTRADA DEL SCRIPT
# Esta construcci√≥n asegura que la funci√≥n `main()` solo se ejecute
# cuando el script es corrido directamente por el int√©rprete de Python.

if __name__ == "__main__":
    # Se llama a la funci√≥n principal para iniciar el programa.
    main()